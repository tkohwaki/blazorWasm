@page "/map"
@inject IJSRuntime JSRuntime
@inject HttpClient client
@using System.Linq
@using System.Net
<h1>グルメマップ?</h1>
<div style="text-align:right">
    <span style="padding-right:1em;font-size:xx-small">Powered by asp.net core blazor+Bing Maps+ぐるなびAPI</span>
</div>
<p>
    検索開始地点をクリックしてから、ジャンルを選んで、[検索]ボタンをクリックすると、該当する店舗が地図上に表示されます。<br/>
    表示された店舗をクリックすると、詳細が表示されます。(C#&lArr;&rArr;Javascript相互運用機能を利用)<br/>
<a href="showsrc.php?FileName=Map.razor&Return=map">ソース</a>
</p>
<div id="myMap" style="width:1024px;height:480px;border-style:solid;border-width:1px;box-shadow:5px 5px rgba(0.5,0x80,0x80,0x80)">
</div>
<div>
@if (CategoryMasters == null) {
    <span style="font-weight:bold">ローディング・・・</span>
} else {
#if GNAVI
    categoryCount = 0;
    @foreach(var cat in CategoryMasters.category_l) {
        if (!categoryChecks.ContainsKey(cat)) {
            categoryChecks.Add(cat,false);
        }
        if ((categoryCount % 5) == 0) {
            <br/>
        }
        <label><input type="checkbox" value="@cat.category_l_code" onchange=@((Action)(()=>categoryChecks[cat]=!categoryChecks[cat])) />@cat.category_l_name</label>@:&nbsp;
        categoryCount++;
    }
#endif
    categoryCount = 0;
    @foreach(var cat in CategoryMasters.results.genre) {
        if (!categoryChecks.ContainsKey(cat)) {
            categoryChecks.Add(cat,false);
        }
        if ((categoryCount % 5) == 0) {
            <br/>
        }
        <!--
        <label><input type="checkbox" value="@@cat.category_l_code" onchange=@@((Action)(()=>categoryChecks[cat]=!categoryChecks[cat])) />@@cat.category_l_name</label>@@:&nbsp;
        -->
        <label><input type="checkbox" value="@cat.code" onchange=@((Action)(()=>categoryChecks[cat]=!categoryChecks[cat])) />@cat.name</label>@:&nbsp;
        categoryCount++;
    }
    <br/>
    @:検索半径：
    <select @bind="findRange">
        <option value="1">300m</option>
        <option value="2">500m</option>
        <option value="3">1km</option>
        <option value="4">2km</option>
    </select>
    　<button class="btn btn-primary" @onclick="OnSearchClick">検索</button>
    <br/>
}
</div>
<pre>
@Mesg
</pre>

@code {
    private string Mesg = "";
    private CategoryMaster CategoryMasters = null;
    private int categoryCount = 0;
    private double Latitude = Double.MinValue;
    private double Longitude = Double.MinValue;
    private Dictionary<Category,bool> categoryChecks = new Dictionary<Category, bool>();
    private string findRange = "2";
    //const string GURUNAVI_KEY = "<Your Gurunavi Key>";
    const string HPG_KEY = "<Your Hotpepper Key>";

    protected override async Task OnInitializedAsync() {
        //string Url = "https://api.gnavi.co.jp/master/CategoryLargeSearchAPI/v3/?keyid=";
        string Url = $"https://webservice.recruit.co.jp/hotpepper/genre/v1/?key={HPG_KEY}&format=json";
        //Url += GURUNAVI_KEY;
        //CategoryMasters = await client.GetJsonAsync<CategoryMaster>(Url);
        CategoryMasters = await client.GetJsonAsync<CategoryMaster>($"http://dnetcore.ohwaki.jp:8086/ServiceProxy.php?url={WebUtility.UrlEncode(Url)}");
    }

    protected override async Task OnAfterRenderAsync(bool first) {
        if (first) {
            await JSRuntime.InvokeVoidAsync("loadMap","myMap");
            await JSRuntime.InvokeVoidAsync("AttachEvents","click",
                DotNetObjectReference.Create(this),
                "OnMapClicked"
            );
        }
    }

    private async Task OnSearchClick() {
        if (Longitude != Double.MinValue) {
            string url = "https://api.gnavi.co.jp/RestSearchAPI/v3";
            //url += $"?keyid={GURUNAVI_KEY}";
            url += $"&latitude={Latitude}";
            url += $"&longitude={Longitude}";
            url += "&hit_per_page=20";
            url += $"&range={findRange}";
            if (categoryChecks.Where(c=>c.Value).Count() != 0) {
                url += "&category_l=";
                foreach(var itm in categoryChecks.Where(c=>c.Value)) {
                    //url += $"{itm.Key.category_l_code},";
                }
                url = url.Substring(0,url.Length-1);
            }

            var rlst = await client.GetJsonAsync<RestranList>(url);
            await JSRuntime.InvokeVoidAsync("ClearRestrans");
            int i=1;
            foreach(var itm in rlst.rest) {
                if (!string.IsNullOrEmpty(itm.latitude) && !string.IsNullOrEmpty(itm.longitude)) {
                    string imgurl = "/images/noimage.png";
                    if (!string.IsNullOrEmpty(itm.image_url.shop_image1))
                    {
                        imgurl = itm.image_url.shop_image1;
                    }
                    var pinarg = new PushpinOpt() {
                        latitude = Double.Parse(itm.latitude),
                        longitude = Double.Parse(itm.longitude),
                        name = itm.name,
                        number = i.ToString(),
                        desc = $"<img src='{imgurl}' style='width:100px;height:100px'/><br/>Tel:{itm.tel}<br/>カテゴリ:{itm.category}<br/>開店時間:{itm.opentime}<br/><a href='{itm.url}' target='_blank'>ホームページ</a>",
                        color = "#ff8080"
                    };
                    try {
                        await JSRuntime.InvokeVoidAsync("AddRestran",pinarg);
                        i++;
                    } catch {
                        Mesg = $"Invalid Data : {itm.name} - {itm.latitude}, {itm.longitude}";
                    }
                }
            }
        } else {
            await JSRuntime.InvokeVoidAsync("alert","検索開始地点が指定されていません。");
        }
    }

    [JSInvokable]
    public async Task OnMapClicked(double latitude, double longitude) {
        //Mesg = $"Current Location={latitude}, {longitude}";
        //this.StateHasChanged();
        await JSRuntime.InvokeVoidAsync("AddPushpin",latitude,longitude,"検索開始地点","#8080ff");
        Latitude = latitude;
        Longitude = longitude;
        Mesg = $"Lat={Latitude}, Lng={Longitude}";
        this.StateHasChanged();
    }

    public class PushpinOpt {
        public double latitude {get; set;}
        public double longitude {get; set;}
        public string name { get; set; }
        public string number { get; set; }
        public string desc { get; set; }
        public string color { get; set; }
    }
#if GNAVI
    class Category {
        public string category_l_code { get; set; }
        public string category_l_name { get; set; }
    }
    class CategoryMaster {
        public string attributes {get; set;}
        public List<Category> category_l {get; set;}
    }
#endif
    class RestranList {
        public string attribute { get; set; }
        public int total_hit_count {get; set;}
        public int hit_per_page {get; set;}
        public int page_offset {get; set;}
        public List<RestranInfo> rest {get; set;}
    }
    class RestranInfo {
        public string attribute {get; set;}
        public string id { get; set; }
        public DateTime update_date { get; set; }
        public string name { get; set; }
        public string name_kana { get; set;}
        public string latitude {get; set;}
        public string longitude {get; set;}
        public string category {get; set; }
        public string url {get; set;}
        public string url_mobile { get; set;}
        public Coupon coupon_url { get; set; }
        public Images image_url { get; set;}
        public string address { get; set; }
        public string tel { get; set;}
        public string tel_sub {get; set; }
        public string fax { get; set;}
        public string opentime { get; set; }
        public string horiday { get; set; }
        public Access access {get; set;}
        public string parking_lots { get; set; }
        public PR pr { get; set; }
        public Code code { get; set; }
    }
    public class Coupon {
        public string pc { get; set; }
        public string mobile { get; set; }
    }
    public class Images {
        public string shop_image1 {get; set; }
        public string shop_image2 {get; set;}
        public string qrcode { get; set; }
    }
    public class Access {
        public string line { get; set;}
        public string station {get; set;}
        public string station_exit { get; set;}
        public string walk { get; set;}
        public string note { get; set;}
    }
    public class PR {
        public string pr_short { get; set; }
        public string pr_long { get; set; }
    }
    public class Code {
        public string areacode { get; set; }
        public string areaname { get; set; }
        public string prefcode { get; set; }
        public string prefname { get; set; }
        public string areacode_s { get; set; }
        public string areaname_s { get; set; }
        public List<string> category_code_l { get; set; }
        public List<string> category_name_l { get; set; }
        public List<string> category_code_s { get; set; }
        public List<string> category_name_s { get; set; }
        public int budget { get; set; }
        public int party { get; set; }
        public string lunch { get; set; }
        public string credit_card { get; set; }
        public string e_money { get; set; }
        public Flags flags { get; set; }
    }
    public class Flags {
        public int mobile_site { get; set; }
        public int mobile_coupon { get; set; }
        public int pc_coupon { get; set; }
    }
    public class CategoryMaster {
        public CategoryResult results { get; set; }
    }
    public class CategoryResult {
        public string api_version { get; set; }
        public List<Category> genre { get; set; }
    }
    public class Category {
        public string code { get; set; }
        public string name { get; set; }
    }
}
